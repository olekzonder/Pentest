[
    {
        "label": "SimpleHTTPRequestHandler",
        "importPath": "http.server",
        "description": "http.server",
        "isExtraImport": true,
        "detail": "http.server",
        "documentation": {}
    },
    {
        "label": "TCPServer",
        "importPath": "socketserver",
        "description": "socketserver",
        "isExtraImport": true,
        "detail": "socketserver",
        "documentation": {}
    },
    {
        "label": "unquote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "create_connection",
        "importPath": "websocket",
        "description": "websocket",
        "isExtraImport": true,
        "detail": "websocket",
        "documentation": {}
    },
    {
        "label": "send_ws",
        "kind": 2,
        "importPath": "Soccer_HTB.middleware",
        "description": "Soccer_HTB.middleware",
        "peekOfCode": "def send_ws(payload):\n\tws = create_connection(ws_server)\n\t# If the server returns a response on connect, use below line\t\n\t#resp = ws.recv() # If server returns something like a token on connect you can find and extract from here\n\t# For our case, format the payload in JSON\n\tmessage = unquote(payload).replace('\"','\\'') # replacing \" with ' to avoid breaking JSON structure\n\tdata = '{\"id\":\"%s\"}' % message\n\tws.send(data)\n\tresp = ws.recv()\n\tws.close()",
        "detail": "Soccer_HTB.middleware",
        "documentation": {}
    },
    {
        "label": "middleware_server",
        "kind": 2,
        "importPath": "Soccer_HTB.middleware",
        "description": "Soccer_HTB.middleware",
        "peekOfCode": "def middleware_server(host_port,content_type=\"text/plain\"):\n\tclass CustomHandler(SimpleHTTPRequestHandler):\n\t\tdef do_GET(self) -> None:\n\t\t\tself.send_response(200)\n\t\t\ttry:\n\t\t\t\tpayload = urlparse(self.path).query.split('=',1)[1]\n\t\t\texcept IndexError:\n\t\t\t\tpayload = False\n\t\t\tif payload:\n\t\t\t\tcontent = send_ws(payload)",
        "detail": "Soccer_HTB.middleware",
        "documentation": {}
    },
    {
        "label": "ws_server",
        "kind": 5,
        "importPath": "Soccer_HTB.middleware",
        "description": "Soccer_HTB.middleware",
        "peekOfCode": "ws_server = \"ws://soc-player.soccer.htb:9091\"\ndef send_ws(payload):\n\tws = create_connection(ws_server)\n\t# If the server returns a response on connect, use below line\t\n\t#resp = ws.recv() # If server returns something like a token on connect you can find and extract from here\n\t# For our case, format the payload in JSON\n\tmessage = unquote(payload).replace('\"','\\'') # replacing \" with ' to avoid breaking JSON structure\n\tdata = '{\"id\":\"%s\"}' % message\n\tws.send(data)\n\tresp = ws.recv()",
        "detail": "Soccer_HTB.middleware",
        "documentation": {}
    },
    {
        "label": "\tws",
        "kind": 5,
        "importPath": "Soccer_HTB.middleware",
        "description": "Soccer_HTB.middleware",
        "peekOfCode": "\tws = create_connection(ws_server)\n\t# If the server returns a response on connect, use below line\t\n\t#resp = ws.recv() # If server returns something like a token on connect you can find and extract from here\n\t# For our case, format the payload in JSON\n\tmessage = unquote(payload).replace('\"','\\'') # replacing \" with ' to avoid breaking JSON structure\n\tdata = '{\"id\":\"%s\"}' % message\n\tws.send(data)\n\tresp = ws.recv()\n\tws.close()\n\tif resp:",
        "detail": "Soccer_HTB.middleware",
        "documentation": {}
    },
    {
        "label": "\t#resp",
        "kind": 5,
        "importPath": "Soccer_HTB.middleware",
        "description": "Soccer_HTB.middleware",
        "peekOfCode": "\t#resp = ws.recv() # If server returns something like a token on connect you can find and extract from here\n\t# For our case, format the payload in JSON\n\tmessage = unquote(payload).replace('\"','\\'') # replacing \" with ' to avoid breaking JSON structure\n\tdata = '{\"id\":\"%s\"}' % message\n\tws.send(data)\n\tresp = ws.recv()\n\tws.close()\n\tif resp:\n\t\treturn resp\n\telse:",
        "detail": "Soccer_HTB.middleware",
        "documentation": {}
    },
    {
        "label": "\tmessage",
        "kind": 5,
        "importPath": "Soccer_HTB.middleware",
        "description": "Soccer_HTB.middleware",
        "peekOfCode": "\tmessage = unquote(payload).replace('\"','\\'') # replacing \" with ' to avoid breaking JSON structure\n\tdata = '{\"id\":\"%s\"}' % message\n\tws.send(data)\n\tresp = ws.recv()\n\tws.close()\n\tif resp:\n\t\treturn resp\n\telse:\n\t\treturn ''\ndef middleware_server(host_port,content_type=\"text/plain\"):",
        "detail": "Soccer_HTB.middleware",
        "documentation": {}
    },
    {
        "label": "\tdata",
        "kind": 5,
        "importPath": "Soccer_HTB.middleware",
        "description": "Soccer_HTB.middleware",
        "peekOfCode": "\tdata = '{\"id\":\"%s\"}' % message\n\tws.send(data)\n\tresp = ws.recv()\n\tws.close()\n\tif resp:\n\t\treturn resp\n\telse:\n\t\treturn ''\ndef middleware_server(host_port,content_type=\"text/plain\"):\n\tclass CustomHandler(SimpleHTTPRequestHandler):",
        "detail": "Soccer_HTB.middleware",
        "documentation": {}
    },
    {
        "label": "\tresp",
        "kind": 5,
        "importPath": "Soccer_HTB.middleware",
        "description": "Soccer_HTB.middleware",
        "peekOfCode": "\tresp = ws.recv()\n\tws.close()\n\tif resp:\n\t\treturn resp\n\telse:\n\t\treturn ''\ndef middleware_server(host_port,content_type=\"text/plain\"):\n\tclass CustomHandler(SimpleHTTPRequestHandler):\n\t\tdef do_GET(self) -> None:\n\t\t\tself.send_response(200)",
        "detail": "Soccer_HTB.middleware",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tpayload",
        "kind": 5,
        "importPath": "Soccer_HTB.middleware",
        "description": "Soccer_HTB.middleware",
        "peekOfCode": "\t\t\t\tpayload = urlparse(self.path).query.split('=',1)[1]\n\t\t\texcept IndexError:\n\t\t\t\tpayload = False\n\t\t\tif payload:\n\t\t\t\tcontent = send_ws(payload)\n\t\t\telse:\n\t\t\t\tcontent = 'No parameters specified!'\n\t\t\tself.send_header(\"Content-type\", content_type)\n\t\t\tself.end_headers()\n\t\t\tself.wfile.write(content.encode())",
        "detail": "Soccer_HTB.middleware",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tpayload",
        "kind": 5,
        "importPath": "Soccer_HTB.middleware",
        "description": "Soccer_HTB.middleware",
        "peekOfCode": "\t\t\t\tpayload = False\n\t\t\tif payload:\n\t\t\t\tcontent = send_ws(payload)\n\t\t\telse:\n\t\t\t\tcontent = 'No parameters specified!'\n\t\t\tself.send_header(\"Content-type\", content_type)\n\t\t\tself.end_headers()\n\t\t\tself.wfile.write(content.encode())\n\t\t\treturn\n\tclass _TCPServer(TCPServer):",
        "detail": "Soccer_HTB.middleware",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcontent",
        "kind": 5,
        "importPath": "Soccer_HTB.middleware",
        "description": "Soccer_HTB.middleware",
        "peekOfCode": "\t\t\t\tcontent = send_ws(payload)\n\t\t\telse:\n\t\t\t\tcontent = 'No parameters specified!'\n\t\t\tself.send_header(\"Content-type\", content_type)\n\t\t\tself.end_headers()\n\t\t\tself.wfile.write(content.encode())\n\t\t\treturn\n\tclass _TCPServer(TCPServer):\n\t\tallow_reuse_address = True\n\thttpd = _TCPServer(host_port, CustomHandler)",
        "detail": "Soccer_HTB.middleware",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tcontent",
        "kind": 5,
        "importPath": "Soccer_HTB.middleware",
        "description": "Soccer_HTB.middleware",
        "peekOfCode": "\t\t\t\tcontent = 'No parameters specified!'\n\t\t\tself.send_header(\"Content-type\", content_type)\n\t\t\tself.end_headers()\n\t\t\tself.wfile.write(content.encode())\n\t\t\treturn\n\tclass _TCPServer(TCPServer):\n\t\tallow_reuse_address = True\n\thttpd = _TCPServer(host_port, CustomHandler)\n\thttpd.serve_forever()\nprint(\"[+] Starting MiddleWare Server\")",
        "detail": "Soccer_HTB.middleware",
        "documentation": {}
    },
    {
        "label": "\t\tallow_reuse_address",
        "kind": 5,
        "importPath": "Soccer_HTB.middleware",
        "description": "Soccer_HTB.middleware",
        "peekOfCode": "\t\tallow_reuse_address = True\n\thttpd = _TCPServer(host_port, CustomHandler)\n\thttpd.serve_forever()\nprint(\"[+] Starting MiddleWare Server\")\nprint(\"[+] Send payloads in http://localhost:8081/?id=*\")\ntry:\n\tmiddleware_server(('0.0.0.0',8081))\nexcept KeyboardInterrupt:\n\tpass",
        "detail": "Soccer_HTB.middleware",
        "documentation": {}
    },
    {
        "label": "\thttpd",
        "kind": 5,
        "importPath": "Soccer_HTB.middleware",
        "description": "Soccer_HTB.middleware",
        "peekOfCode": "\thttpd = _TCPServer(host_port, CustomHandler)\n\thttpd.serve_forever()\nprint(\"[+] Starting MiddleWare Server\")\nprint(\"[+] Send payloads in http://localhost:8081/?id=*\")\ntry:\n\tmiddleware_server(('0.0.0.0',8081))\nexcept KeyboardInterrupt:\n\tpass",
        "detail": "Soccer_HTB.middleware",
        "documentation": {}
    }
]